#!/bin/bash -eu

function fail {
	echo FAILURE
}
trap fail EXIT

source defs.sh

MAIN="ip netns exec main"
INET="ip netns exec inet"
B1="ip netns exec bear1"
B2="ip netns exec bear2"
R1="ip netns exec router"
C1="ip netns exec client1"
C2="ip netns exec client2"
T1="ip netns exec tech1"
T2="ip netns exec tech2"

function debug {
	echo ===== INTERNET ======
	$INET ip -4 -o addr ls  | sed -e 's/scope.*//'
	echo ===== B1 ======
	$B1 ip -4 -o addr ls  | sed -e 's/scope.*//'
	echo ===== B2 ======
	$B2 ip -4 -o addr ls  | sed -e 's/scope.*//'
	echo ===== R1 ======
	$R1 ip -4 -o addr ls  | sed -e 's/scope.*//'
	echo ===== C1 ======
	$C1 ip -4 -o addr ls  | sed -e 's/scope.*//'
	echo ===== C2 ======
	$C2 ip -4 -o addr ls  | sed -e 's/scope.*//'
}

function captest {
	tshark -q -i wan -w /tmp/demo.pcap  &
	TS=$!
	sleep 3
	$C1 ping -c1 8.8.8.8
	$C2 ping -c1 8.8.8.8
	$T1 ping -c1 8.8.8.8
	$T2 ping -c1 8.8.8.8
	kill $TS
}

function clean {
	# Clean up prior crashes
	ip link del wan &> /dev/null || true
	for ns in  inet bear1 bear2 router client1 client2; do
		ip netns del $ns  &> /dev/null || true
	done
}
if [[ ${BASH_SOURCE} == $0 ]]; then

	# Parse command line
	while getopts "x" opt; do
		case "$opt" in 
			x) set -x;;
		esac
	done
	shift $(($OPTIND-1))

	for cmd in ${*:-none}; do
		case $cmd in
		debug)  debug ;;
		clean*) clean ;;
		net*)
			# Start fresh
			clean

			# Fake out iproute2 tools to use "main" as a namespace
			mkdir -p /var/run/netns
			rm -f /var/run/netns/main
			ln -s /proc/1/ns/net /var/run/netns/main

			# Build the network
			newlink main inet  10.255.255
			newlink inet bear1 192.168.201
			newlink inet bear2 192.168.202
			newlink bear1 router 192.168.101
			newlink bear2 router 192.168.102

			# Add clients to a bridge in the router namespace
			newlink router client1 172.20.10 0 101 11
			newlink router client2 172.20.10 0 102 12
			$R1 brctl addbr clients
			$R1 brctl addif clients client1
			$R1 brctl addif clients client2
			$R1 ip link set clients up
			$R1 ip addr add dev clients 172.20.10.1/24

			# Add techs to a bridge in the router namespace
			newlink router tech1 172.20.1 0 101 21
			newlink router tech2 172.20.1 0 102 22
			$R1 brctl addbr techs
			$R1 brctl addif techs tech1
			$R1 brctl addif techs tech2
			$R1 ip link set techs up
			$R1 ip addr add dev techs 172.20.1.1/24


			$INET iptables -t nat -A POSTROUTING -o main -j MASQUERADE
			$B1 iptables -t nat -A POSTROUTING -o inet -j MASQUERADE
			$B2 iptables -t nat -A POSTROUTING -o inet -j MASQUERADE
			$R1 iptables -t nat -A POSTROUTING -o bear1 -j MASQUERADE
			$R1 iptables -t nat -A POSTROUTING -o bear2 -j MASQUERADE

			until $MAIN iptables -t nat -C POSTROUTING \
				-o bear-company -j MASQUERADE &> /dev/null || true ; do
				$MAIN iptables -t nat -D POSTROUTING \
				-o bear-company -j MASQUERADE &> /dev/null || true
				sleep 1
			done
			$MAIN iptables -t nat -A POSTROUTING -o bear-company -j MASQUERADE
			;;
		pol*)
			$R1 ebtables -t nat -F
			$R1 iptables -t mangle -F
			$R1 ip rule flush
			$R1 ip rule add from all lookup main pri 32766
			$R1 ip rule add from all lookup default pri 32767
			# Write a routing table for bear1
			$R1 ip route flush table 101
			$R1 ip route add 172.20.10.0/24 dev clients table 101 
			$R1 ip route add 192.168.101.0/24 dev bear1 table 101 
			$R1 ip route add default via 192.168.101.1  table 101 
			# Write a routing table for bear2
			$R1 ip route flush table 102
			$R1 ip route add 172.20.10.0/24 dev clients table 102 
			$R1 ip route add 192.168.102.0/24 dev bear1 table 102 
			$R1 ip route add default via 192.168.102.1  table 102 
			# Turn off RP filter
			$R1 ip route del default &> /dev/null || true
			$R1 find /proc/sys/net  -name rp_filter | while read file; do
				$R1 bash -c "echo 0 > $file"
			done
			;;
		spol*)
			# Set up policy routes
			$R1 ip rule add from 172.20.10.101 table 101
			$R1 ip rule add from 172.20.10.102 table 102
			$R1 ip rule add from 172.20.1.0/24 table 102
			;;
		fwpol*)
			# Set up policy routes
			$R1 ip rule add fwmark 101 table 101
			$R1 ip rule add fwmark 102 table 102
			$R1 ipset destroy
			$R1 ipset create fw101 hash:ip
			$R1 ipset create fw102 hash:ip
			$R1 ipset add fw101 172.20.10.101
			$R1 ipset add fw102 172.20.10.102
			$R1 ipset add fw101 172.20.1.101
			$R1 ipset add fw101 172.20.1.102
			$R1 iptables -t mangle -A PREROUTING -m set --match-set fw101 src -j MARK --set-mark 101/0xff
			$R1 iptables -t mangle -A PREROUTING -m set --match-set fw102 src -j MARK --set-mark 102/0xff
			;;
		ebpol*)
			# Set up policy routes
			$R1 ip rule add fwmark 101 table 101
			$R1 ip rule add fwmark 102 table 102
			$R1 ebtables -t nat  -A PREROUTING -i client1 -j mark --mark-set 101
			$R1 ebtables -t nat  -A PREROUTING -i client2 -j mark --mark-set 102
			$R1 iptables -t mangle -A PREROUTING -i techs -j MARK --set-mark 101/0xff
			;;
		ser*)

			kill $(cat /tmp/router.pid) || true
			$R1 dnsmasq --pid-file=/tmp/router.pid \
				--dhcp-range=172.20.10.101,172.20.10.199 \
				--dhcp-option=option:router,172.20.10.1 \
				--dhcp-option=option:dns-server,172.20.10.1 \
				--server 172.27.0.11
			kill $(cat /run/client1.pid) || true
			kill $(cat /run/client2.pid) || true
			$C1 dhclient -pf /run/client1.pid -H client1 -sf simple-script router
			$C2 dhclient -pf /run/client2.pid -H client2 -sf simple-script router
			;;
		test)
			captest
			;;
		none|help)
			echo "Usage: $0 [network|policy|spol|fwpol|ebpol|services|clean|debug|help]"
			;;
		*)
			echo "What do you mean, $cmd?"
			false
			;;
		esac
	done
fi
trap - EXIT
echo SUCCESS
